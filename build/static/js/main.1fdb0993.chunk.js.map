{"version":3,"sources":["components/List.js","App.js","config/config.js","serviceWorker.js","index.js"],"names":["List","props","className","restaurantes","map","restaurante","properties","branch_id","name","company_name","address","hours","horario","JSON","parse","coordinates","geometry","key","onClick","flyTo","class","hour","index","start_hour","end_hour","Map","ReactMapboxGl","accessToken","minZoom","maxZoom","geojson","type","data","App","moveEnd","center","getCenter","setState","lng","lat","features","queryRenderedFeatures","layers","length","state","zoomEnd","zoom","getZoom","mapRef","current","essential","styleLoad","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","createRef","this","ref","style","containerStyle","height","width","onStyleLoad","onDragEnd","id","url","tileJsonSource","sourceId","layout","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fdb0993.chunk.js","sourcesContent":["import React, { createRef } from 'react';\n\nconst List = (props) => {\n  const renderFeatures = () => {\n      const render = props.restaurantes.map(restaurante => {\n        const { branch_id, name, company_name, address, hours } = restaurante.properties;\n        const horario = JSON.parse(hours);\n        const { coordinates } = restaurante.geometry;\n        return (\n        <button\n          key={branch_id}\n          onClick={() => props.flyTo(coordinates)}\n          className=\"focus:outline-none border-solid border border-gray-600 flex flex-col p-4 rounded text-white m-4 justify-start focus:bg-gray-800 hover:bg-gray-800 focus:border-blue-500\">\n          <div class=\"flex flex-row w-full align-center justify-between\">\n            <div class=\"text-xl font-bold text-gray-100\">{`${company_name} `}</div>\n            <div class=\"text-gray-100\">{name}</div>\n          </div>\n          <div class=\"flex text-gray-100 w-full\">\n              { address }\n          </div>\n          <div class=\"flex text-gray-100 w-full text-sm\">\n            {horario.map((hour, index) => (<span key={`${branch_id}_${index}`}>{`${hour.start_hour} - ${hour.end_hour}`}</span>))}\n          </div>\n        </button>);\n      });\n      return render;\n    };\n  return (<div className=\"flex flex-col flex-1 w-full overflow-y-auto py-1 px-3\">\n    {renderFeatures()}\n  </div>);\n}\n\nexport default List;","import React, { createRef } from 'react';\nimport ReactMapboxGl, { Image, Source, Layer } from 'react-mapbox-gl';\nimport { GeolocateControl } from 'mapbox-gl';\nimport config from './config/config';\n\nimport './assets/tailwind.generated.css';\nimport './App.css';\nimport List from './components/List';\n\nconst Map = ReactMapboxGl({\n  accessToken: config.mapbox_key,\n  minZoom: 11,\n  maxZoom: 17\n});\n\nconst geojson = {\n  type: 'geojson',\n  data: 'https://nodes.fooapp.mx:6006/api/branches/geojson'\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = createRef();\n    this.state = { features: [], center: [-106.077197,28.6359829], zoom: [15] };\n  }\n\n  moveEnd = (map) => {\n    const center = map.getCenter();\n    this.setState([center.lng, center.lat]);\n    const features = map.queryRenderedFeatures({ layers: ['restaurantes-icons'] });\n    if (features.length !== this.state.features.length) {\n      this.setState({ features });\n    }\n  }\n\n  zoomEnd = (map) => {\n    const zoom = map.getZoom();\n    this.setState({ zoom: [zoom] });\n  }\n\n  flyTo = (center) => {\n    this.setState({ center, zoom: [17] });\n    this.mapRef.current.state.map.flyTo({ center, zoom: 17, essential: true });\n  }\n\n  styleLoad = (map) => {\n    map.addControl(\n      new GeolocateControl({\n      positionOptions: {\n      enableHighAccuracy: true\n      },\n      trackUserLocation: true\n      })\n    );\n  }\n  render() {\n    const { features, center, zoom } = this.state;\n    return (\n      <div className=\"App flex flex-row overflow-y-hidden w-full\">\n        <div class=\"flex w-2/3 h-screen\">\n          <Map\n            ref={this.mapRef}\n            style=\"mapbox://styles/mapbox/dark-v9\"\n            containerStyle={{\n              height: '100%',\n              width: '100%'\n            }}\n            onStyleLoad={this.styleLoad}\n            zoom={zoom}\n            onDragEnd={this.moveEnd}\n            center={center}\n          >\n            <Image id={'map-marker'} url='/marker.png' />\n            <Source\n              id={'restaurantes-source'} tileJsonSource={geojson} />\n            <Layer\n              id=\"restaurantes-icons\"\n              sourceId={'restaurantes-source'}\n              type=\"symbol\"\n              layout={{ \"icon-image\": \"map-marker\", \"icon-size\": 0.14 }}>\n            </Layer>\n          </Map>\n        </div>\n        <div className=\"flex flex-col bg-dark-bg h-screen w-1/3 justify-center items-center overflow-y-hidden\">\n          <div className=\"flex text-2xl text-gray-100 font-bold py-5\">\n            Restaurantes\n          </div>\n          <List restaurantes={features} flyTo={this.flyTo}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  mapbox_key: 'pk.eyJ1IjoiZm9vYXBwIiwiYSI6ImNrYmxlM3d1NzE3eHgycXFpd3EycWhldHYifQ.7yj60vm2-cTIe-wb274GQA'\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}